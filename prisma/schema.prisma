// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RelationType {
  FRIEND
  BLOCKED
}

enum NotificationType {
  RECEIVED_FRIEND_REQUEST
  LIKED_POST
  LIKED_COMMENT
  COMMENTED_ON_POST
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  coverImage    String?
  password      String?
  posts         Post[]
  accounts      Account[]
  Comments      Comment[]
  relationA     Relation[]      @relation("userA")
  relationB     Relation[]      @relation("userB")
  sender        FriendRequest[] @relation("sender")
  receiver      FriendRequest[] @relation("receiver")
  owner         Notification[]  @relation("owner")
  associate     Notification[]  @relation("associate")
  story         Story[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerifyToken {
  id    String @id @default(cuid())
  email String
  token String @unique

  @@unique([email, token])
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  edited    Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  authorId    String
  title       String
  description String
  imagePath   String?
  likes       Int
  comments    Comment[]
}

model Story {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  imagePath String
  expires   DateTime @default(dbgenerated("datetime('now', '+1 days')"))
}

model Comment {
  id        String   @id @default(cuid())
  likes     Int
  content   String
  createdAt DateTime @default(now())
  edited    Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

model Relation {
  userA   User   @relation("userA", fields: [userAId], references: [id], onDelete: Cascade)
  userAId String
  userB   User   @relation("userB", fields: [userBId], references: [id], onDelete: Cascade)
  userBId String

  type RelationType

  @@id([userAId, userBId])
}

model FriendRequest {
  createdAt  DateTime @default(now())
  sender     User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User     @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@id([senderId, receiverId])
}

model Notification {
  createdAt   DateTime         @default(now())
  owner       User             @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  associate   User             @relation("associate", fields: [associateId], references: [id], onDelete: Cascade)
  associateId String
  type        NotificationType

  @@id([ownerId, associateId])
}
